


ARM Macro Assembler    Page 1 


    1 00000000         ; r12 := key
    2 00000000         ; r11 
    3 00000000         ; r10 := working message word pointer
    4 00000000         ; r9  := encrpytion jump table ADDRESS
    5 00000000         ; r8  := decryption jump table ADDRESS
    6 00000000         ; r7  := case register for jump table
    7 00000000         
    8 00000000         
    9 00000000                 THUMB
   10 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   11 00000000                 EXPORT           Start
   12 00000000         
   13 00000000         
   14 00000000         
   15 00000000 37A2B89E 
                       key     DCD              0x37A2B89E  ;
   16 00000004 4D696368 
                       message DCD              0x4D696368  ; Mich
   17 00000008 61656C5F        DCD              0x61656C5F  ; ael_
   18 0000000C 4E65776D        DCD              0x4E65776D  ; Newm
   19 00000010 616E3A29        DCD              0x616E3A29  ; an:)
   20 00000014 00000000        DCD              0x0         ; termination word
   21 00000018         
   22 00000018         Start
   23 00000018 F2AF 0C1C       ADR              r12, key
   24 0000001C F8DC C000       LDR              r12, [r12]
   25 00000020 F2AF 0A20       ADR              r10, message ; load the message
                                                             address pointer
   26 00000024 F20F 0920       ADR              r9, encrpyt_JumpTable
   27 00000028 F8D9 9000       LDR              r9, [r9]
   28 0000002C F20F 0828       ADR              r8, decrypt_JumpTable
   29 00000030 F8D8 8000       LDR              r8, [r8]
   30 00000034         
   31 00000034         encrpyt_loop
   32 00000034 F85A 0B04       LDR              r0, [r10], #4 ; load a word
   33 00000038 2800            CMP              r0, #0
   34 0000003A D0FE            BEQ              .           ; TODO -> branch to
                                                             decrpyt
   35 0000003C         
   36 0000003C         ;Not equal (still within the loop)
   37 0000003C F000 F814       BL               load_case
   38 00000040 F859 F027       LDR              pc, [r9, r7, LSL #2]
   39 00000044         
   40 00000044         encrpyt_store
   41 00000044 B401            PUSH             {r0}
   42 00000046 E7F5            B                encrpyt_loop
   43 00000048         
   44 00000048         ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                       ~~~~~~~~~~~~~~~~~~~~~~
   45 00000048         encrpyt_JumpTable
   46 00000048 00000000        DCD              case_0
   47 0000004C 00000000        DCD              case_1
   48 00000050 00000000        DCD              case_2
   49 00000054 00000000        DCD              case_3
   50 00000058         
   51 00000058         decrypt_JumpTable
   52 00000058 00000000        DCD              case_0_reverse
   53 0000005C 00000000        DCD              case_1_reverse



ARM Macro Assembler    Page 2 


   54 00000060 00000000        DCD              case_2_reverse
   55 00000064 00000000        DCD              case_3_reverse
   56 00000068         
   57 00000068         load_case
   58 00000068 F04F 0700       MOV              r7, #0
   59 0000006C D500            BPL              positive_case
   60 0000006E D405            BMI              negative_case
   61 00000070         
   62 00000070         positive_case
   63 00000070 F5B0 7F7A       CMP              r0, #1000
   64 00000074 BFB4 2700       MOVLT            r7, #0
   65 00000078 2701            MOVGE            r7, #1
   66 0000007A 4770            BX               lr
   67 0000007C         
   68 0000007C         negative_case
   69 0000007C F510 7F7A       CMP              r0, #-1000
   70 00000080 BFCC 2702       MOVGT            r7, #2
   71 00000084 2703            MOVLE            r7, #3
   72 00000086 4770            BX               lr
   73 00000088         
   74 00000088         
   75 00000088         case_0                               ; 0 - 1000
   76 00000088 EA4F 1070       ROR              r0, r0, #5
   77 0000008C E7DA            B                encrpyt_store
   78 0000008E         
   79 0000008E         case_0_reverse
   80 0000008E EA4F 60F0       ROR              r0, r0, #27
   81 00000092 E000            B                decrpyt_store
   82 00000094         
   83 00000094         case_1                               ; 1000 - inf
   84 00000094 EA4F 40B0       ROR              r0, r0, #18
   85 00000098 E7D4            B                encrpyt_store
   86 0000009A         
   87 0000009A         case_1_reverse
   88 0000009A EA4F 30B0       ROR              r0, r0, #14
   89 0000009E E000            B                decrpyt_store
   90 000000A0         
   91 000000A0         case_2                               ; -1000 - 0
   92 000000A0 EA4F 00F0       ROR              r0, r0, #3
   93 000000A4 E7CE            B                encrpyt_store
   94 000000A6         
   95 000000A6         case_2_reverse
   96 000000A6 EA4F 7070       ROR              r0, r0, #29
   97 000000AA E000            B                decrpyt_store
   98 000000AC         
   99 000000AC         case_3                               ; 0 - -1000
  100 000000AC EA4F 5070       ROR              r0, r0, #21
  101 000000B0 E7C8            B                encrpyt_store
  102 000000B2         
  103 000000B2         case_3_reverse
  104 000000B2 EA4F 20F0       ROR              r0, r0, #11
  105 000000B6 E000            B                decrpyt_store
  106 000000B8         
  107 000000B8                 ALIGN
  108 000000B8                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_SimpleProject -IC:\Keil_v5\ARM\PACK\A
RM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Dev
ice\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 



ARM Macro Assembler    Page 3 


SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.
\main.lst main.s
